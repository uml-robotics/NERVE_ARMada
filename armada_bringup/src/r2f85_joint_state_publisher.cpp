#include "ros/ros.h"
#include <sensor_msgs/JointState.h>
#include <robotiq_2f_gripper_control/Robotiq2FGripper_robot_input.h>
#include <robotiq_2f_gripper_control/Robotiq2FGripper_robot_output.h>

using namespace std;

class JointStatePublisher
{
protected:

  ros::NodeHandle nh_;
  ros::Subscriber sub;
  ros::Publisher pub;

public:

  /**
   * Class Constructor.
   *
   * Constructor for JointStatePublisher class.
   *
   * @param[in] nh A ROS NodeHandle object.
   */
  JointStatePublisher(ros::NodeHandle nh) :
    nh_(nh)
  {
    pub = nh_.advertise<sensor_msgs::JointState>("/joint_states", 10);
    sub = nh_.subscribe("/Robotiq2FGripperRobotInput", 1000, &JointStatePublisher::gripper_joint_pos_callback, this);
  }

  /**
   * Store the current actual position of the gripper's finger joint.
   *
   * Callback to retrieve and update actual finger position.
   *
   * @param[in] req gpd_ros/GraspConfigList Container of grasp target candidates generated by GPD algorithm.
   * @return Bool Service completion result.
   */
  void gripper_joint_pos_callback(const robotiq_2f_gripper_control::Robotiq2FGripper_robot_input& msg)
  {
    double joint_pos;
    double pos_val;
    sensor_msgs::JointState joint_state;

    pos_val = msg.gPO;
    joint_pos = 0.85 * (pos_val/255);

    ros::Time stamp = ros::Time(0);
    joint_state.name = {"finger_joint"};
    joint_state.position = {joint_pos};
    joint_state.header.stamp = stamp;

    pub.publish(joint_state);
  }

};

int main(int argc, char **argv)
{
  ros::init(argc, argv, "r2f85_joint_state_publisher");
  ros::NodeHandle nh;

  ros::AsyncSpinner spinner(2);
  spinner.start();

  JointStatePublisher jointStatePublisher = JointStatePublisher(nh);
  ROS_WARN("r2f85_joint_state_publisher node Ready.");

  while(ros::ok()){
    // spin
  }

  return 0;
}
